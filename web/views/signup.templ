package views

import "github.com/tiredkangaroo/keylock/web/layouts"

templ Signup() {
	@layouts.BaseLayout() {
		<div class="w-full h-full flex flex-col justify-center items-center">
			<div class="text-4xl mb-4">
				Sign Up 🔐
			</div>
			<div class="w-[30%] min-w-fit grid gap-2">
				<div id="signup-message" class="py-3 px-2 bg-red-100 border-1 rounded-md border-red-700 hidden wrap-break-word w-full"></div>
				<div class="w-full grid gap-4">
					<input id="name" class="rounded-sm border-2 border-blue-900 p-1 pl-2 py-2 mb-1 w-full" type="text" autofocus placeholder="Enter a username"/>
					<input id="master_password" class="rounded-sm border-2 border-blue-900 p-1 pl-2 py-2 mb-1 w-full" type="password" autofocus placeholder="Enter a password"/>
					<button
						onclick="signup(event, document.getElementById('name').value, document.getElementById('master_password').value)"
						type="button"
						class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
					>
						Sign Up
					</button>
				</div>
			</div>
		</div>
		<script>
            function setError(message) {
                const messageElement = document.getElementById("signup-message");
                messageElement.textContent = message;
                messageElement.classList.remove("hidden");
            }
            function showCodeModal(code) {
                document.getElementById("code-modal-code").textContent = code;
				const modal = document.getElementById("code-modal")
                modal.removeAttribute("hidden");
                modal.showModal();
            }
            async function signup(event, username, masterPassword) {
                console.log(event);
                event.preventDefault();
                if (!username || !masterPassword) {
                    setError("Fields cannot be empty.");
                    return;
                }
                await fetch("/api/accounts/new", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        name: username,
                        master_password: masterPassword,
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.error) {
                        localStorage.setItem("session_code", data.session_code);
                        const d = new Date();
                        d.setTime(d.getTime() + (1000 * 60 * 60 * 24));
                        localStorage.setItem("session_code_expiry", d);
                        showCodeModal(data.code);
                    } else {
                        setError(data.error || "An error occurred during signup.");
                    }
                })
                .catch(error => {
                    console.error("Error during signup:", error);
                    setError("An unexpected error occurred. " + error.message);
                });
            }
        </script>
	}
}
