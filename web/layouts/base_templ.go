// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/tiredkangaroo/keylock/web/components/input"
	"github.com/tiredkangaroo/keylock/web/components/modal"
)

func BaseLayout() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" class=\"h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><!-- Tailwind CSS (output) --><link href=\"/assets/css/output.css\" rel=\"stylesheet\"><link rel=\"icon\" href=\"data:image/svg+xml,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 100 100&#39;&gt;&lt;text y=&#39;.9em&#39; font-size=&#39;90&#39;&gt;🔐&lt;/text&gt;&lt;/svg&gt;\"><title>keylock web</title></head><body class=\"h-full\"><div class=\"h-full flex flex-col bg-[#d0e7ff] text-black\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = modal.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = input.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<main class=\"flex-1\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</main></div></body><script>\n  // Re-initialize templUI components after HTMX swaps\n  document.body.addEventListener(\"htmx:afterSwap\", (e) => {\n    if (window.templUI) {\n\t\t\t\t\tObject.values(window.templUI).forEach(comp => {\n\t\t\t\t\t\tcomp.init?.(e.detail.elt);\n\t\t\t\t\t});\n    }\n  });\n\n  // Re-initialize components after out-of-band swaps\n  document.body.addEventListener(\"htmx:oobAfterSwap\", (e) => {\n    if (window.templUI) {\n\t\t\t\t\tObject.values(window.templUI).forEach(comp => {\n\t\t\t\t\t\tcomp.init?.(e.detail.target);\n\t\t\t\t\t});\n    }\n  });\n\n  // Cleanup before swap (for components with event listeners)\n  document.body.addEventListener(\"htmx:beforeSwap\", (e) => {\n    if (window.templUI) {\n\t\t\t\t\tObject.values(window.templUI).forEach(comp => {\n\t\t\t\t\t\tcomp.cleanup?.(e.detail.target);\n\t\t\t\t\t});\n    }\n  });\n\t\t</script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
